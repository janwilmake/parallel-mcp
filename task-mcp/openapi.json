{
  "openapi": "3.0.3",
  "info": {
    "x-mcp": {
      "protocolVersion": "2025-03-26",
      "toolOperationIds": [
        "createTaskGroup",
        "getResultMarkdown",
        "createDeepResearch"
      ],
      "authEndpoint": "/me"
    },
    "title": "Parallel.ai Multitask API",
    "description": "Perform Deep Research or Create Task Groups using Parallel.ai. \n\n- For doing a single deep research where detailed unstructured output is preferred, use 'createDeepResearch'.\n- When tabular data is preferred with more structured data enrichment, a task group (createTaskGroup + getResultMarkdown) is more useful.",
    "version": "1.0.0",
    "contact": {
      "name": "Parallel.ai",
      "url": "https://parallel.ai"
    }
  },
  "servers": [
    {
      "url": "https://task-mcp.parallel.ai",
      "description": "Multitask Demo Server"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/v1beta/tasks/deep-research": {
      "post": {
        "summary": "Create Deep Research Task",
        "description": "Creates a comprehensive Deep Research task that transforms natural language research queries into analyst-grade intelligence reports. Automatically enables text output format and events streaming for real-time progress updates.\n\n**Key Features:**\n- Multi-step web exploration and targeted information retrieval\n- Sophisticated synthesis with inline citations and verification\n- Markdown report format with structured intelligence\n- Real-time progress updates via Server-Sent Events\n- Estimated duration: 5-25 minutes (up to 45 minutes for complex research)\n\n**Requirements:**\n- Input must be under 15,000 characters for optimal performance\n- Requires 'pro' or 'ultra' processors (defaults to 'pro')\n- Automatically configures text schema and enables events streaming\n\nðŸ“– **Documentation:** https://docs.parallel.ai/task-api/features/task-deep-research",
        "operationId": "createDeepResearch",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["input"],
                "properties": {
                  "input": {
                    "type": "string",
                    "maxLength": 15000,
                    "description": "Natural language research query or objective. Be specific and detailed for better results.\n\n**Examples:**\n- 'Create a comprehensive market research report on the HVAC industry in the USA including an analysis of recent M&A activity and other relevant details'\n- 'Analyze the competitive landscape of AI-powered customer service platforms, focusing on pricing models and key differentiators'\n- 'Research the regulatory environment for cryptocurrency exchanges in Europe, including recent policy changes and compliance requirements'\n\n**Best Practices:**\n- Keep under 15,000 characters for optimal performance\n- Be specific about what intelligence you need\n- Include desired scope and focus areas\n- Mention any particular timeframes or geographic regions",
                    "example": "Create a comprehensive market research report on the renewable energy storage market in Europe, focusing on battery technologies and policy impacts"
                  },
                  "processor": {
                    "type": "string",
                    "enum": ["pro", "ultra", "ultra2x", "ultra4x", "ultra8x"],
                    "default": "pro",
                    "description": "Processor selection for Deep Research capability. Defaults to 'pro' if not specified.\n\n**Deep Research Processors:**\n- **pro** ($0.10/task): Exploratory web research with citations, 3-9min latency\n- **ultra** ($0.30/task): Advanced multi-source deep research, 5-25min latency\n- **ultra2x** ($0.60/task): Difficult deep research, 5-25min latency\n- **ultra4x** ($1.20/task): Very difficult deep research, 8-30min latency\n- **ultra8x** ($2.40/task): Most difficult deep research, 8-30min latency\n\n**Note:** Only 'pro' and 'ultra' family processors support Deep Research capabilities.\n\nðŸ“– **Documentation:** https://docs.parallel.ai/task-api/core-concepts/choose-a-processor"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Deep Research task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepResearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input or processor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "missing_input": {
                    "value": {
                      "error": "Missing required field",
                      "detail": "'input' is a required field",
                      "required_fields": ["input"],
                      "status": 400
                    }
                  },
                  "input_too_long": {
                    "value": {
                      "error": "Input too long",
                      "detail": "Input must be under 15,000 characters for optimal Deep Research performance",
                      "input_length": 16500,
                      "max_length": 15000,
                      "status": 400
                    }
                  },
                  "invalid_processor": {
                    "value": {
                      "error": "Invalid processor for Deep Research",
                      "detail": "Deep Research requires 'pro' or 'ultra' processors",
                      "provided_processor": "base",
                      "valid_processors": [
                        "pro",
                        "ultra",
                        "ultra2x",
                        "ultra4x",
                        "ultra8x"
                      ],
                      "status": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "Authentication required",
                  "detail": "Missing x-api-key or Authorization header. Please provide a valid API key.",
                  "status": 401
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "Failed to create Deep Research task",
                  "detail": "Internal server error occurred",
                  "status": 500
                }
              }
            }
          }
        }
      }
    },
    "/v1beta/tasks/groups": {
      "post": {
        "summary": "Create Batch Task Group",
        "description": "Creates a new task group for batch processing. Responds with a URL in format https://platform.parallel.ai/view/task-run-group/{taskGroupId} that can immediately be shared with the user for viewing, results will be streamed in here. NB: the url cannot be fetched or curl'ed as it's behind auth. \n\nAfter the tasks are done, the task-group ID can be used to retrieve a machine-readable overview of the results using the `getResultMarkdown` tool.",
        "operationId": "createTaskGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["inputs", "output_type", "output"],
                "properties": {
                  "inputs": {
                    "description": "JSON array of input objects to process.\n\nIf the user clearly provides or desires tabular data, input multiple rows here.\n\n For large datasets, start with a small batch (3-5 inputs) to test and validate results before scaling up, unless explicitly requested to process all inputs at once.",
                    "type": "array",
                    "items": { "type": "object" }
                  },
                  "output_type": {
                    "type": "string",
                    "enum": ["text", "json"],
                    "description": "Type of output expected from tasks"
                  },
                  "output": {
                    "type": "string",
                    "description": "Defines the desired output format and structure. Can be either:\n\n**Text Description:** Simple description of what you want extracted (e.g., 'Extract company CEO, industry, and headquarters location')\n\n**JSON Schema:** For structured output when output_type is 'json'. Follow these best practices:\n- Use flat object structure with descriptive field names (e.g., 'ceo_name' not 'name')\n- Include detailed 'description' fields with Entity + Action + Specifics + Error Handling\n- Specify data formats clearly (dates as YYYY-MM-DD, ranges with units)\n- Include all fields in 'required' array and set 'additionalProperties: false'\n- Avoid deeply nested structures and unsupported keywords (minLength, pattern, etc.)\n- Don't include 'reasoning' or 'confidence_score' fields (automatically provided in basis)\n\n**Schema Requirements:**\n- Root type must be 'object' with properties\n- Max 5 levels nesting, 100 total properties\n- Max 15,000 chars total string length\n- All fields must be in required array\n\n**Example JSON Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"ceo_name\": {\n      \"type\": \"string\",\n      \"description\": \"Current CEO full name from company website or recent news. If unavailable, return 'Not Available'.\"\n    },\n    \"annual_revenue_2024\": {\n      \"type\": \"string\", \n      \"description\": \"2024 revenue in millions USD format (e.g. '$500M'). If unavailable, return null.\"\n    }\n  },\n  \"required\": [\"ceo_name\", \"annual_revenue_2024\"],\n  \"additionalProperties\": false\n}\n```\n\nðŸ“– **Documentation:** https://docs.parallel.ai/task-api/core-concepts/specify-a-task",
                    "example": "Extract company information including CEO name, primary industry, and headquarters location"
                  },
                  "processor": {
                    "type": "string",
                    "enum": [
                      "lite",
                      "base",
                      "core",
                      "pro",
                      "ultra",
                      "ultra2x",
                      "ultra4x",
                      "ultra8x"
                    ],
                    "description": "Optional processor selection that determines speed, cost, and capability. If not specified, will be auto-suggested based on task complexity.\n\n**Processor Options:**\n- **lite** ($0.005/input): Basic metadata extraction, 5s-60s latency, ~2 fields\n- **base** ($0.01/input): Standard enrichments, 15s-100s latency, ~5 fields\n- **core** ($0.025/input): Cross-referenced complex outputs, 1-5min latency, ~10 fields\n- **pro** ($0.10/input): Exploratory web research with citations, 3-9min latency, ~20 fields\n- **ultra** ($0.30/input): Advanced multi-source deep research, 5-25min latency, ~20 fields\n- **ultra2x** ($0.60/input): Difficult deep research, 5-25min latency, ~25 fields\n- **ultra4x** ($1.20/input): Very difficult deep research, 8-30min latency, ~25 fields\n- **ultra8x** ($2.40/input): Most difficult deep research, 8-30min latency, ~25 fields\n\n**Key Features by Tier:**\n- lite/base: Basic citations and reasoning\n- core+: Full citations, reasoning, confidence scores, and excerpts\n- pro+: Enables Deep Research capabilities for comprehensive analysis\n\n**Selection Guide:** Use lite/base for simple data extraction, core for reliable structured outputs, pro+ when reasoning depth and comprehensive research are critical.\n\nðŸ“– **Documentation:** https://docs.parallel.ai/task-api/core-concepts/choose-a-processor"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task group created successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "URL at which the task group can be viewed",
                  "example": "https://platform.parallel.ai/view/task-run-group/tgrp_abc123"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "Missing required fields: inputs, output_type"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "Missing x-api-key header"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/{taskRunOrGroupId}": {
      "get": {
        "summary": "Get Task Run or Task Group Results",
        "description": "Retrieves task run or task group results in various formats",
        "operationId": "getTaskRunOrGroupResults",
        "parameters": [
          {
            "name": "taskRunOrGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task run identifier (trun_*) or task group identifier (tgrp_*)"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["application/json", "text/html", "text/markdown"]
            },
            "description": "Response format preference"
          }
        ],
        "responses": {
          "200": {
            "description": "Task run or task group results",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TaskGroupResults"
                    },
                    {
                      "$ref": "#/components/schemas/TaskRunResults"
                    }
                  ]
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              },
              "text/markdown": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Task run or task group not found"
          }
        }
      }
    },
    "/{taskRunOrGroupId}.md": {
      "get": {
        "summary": "Get Task Run or Task Group Results as Markdown",
        "operationId": "getResultMarkdown",
        "description": "Get Task Run or Task Group Results as Markdown with optional basis information (for task groups)",
        "parameters": [
          {
            "name": "taskRunOrGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task run identifier (trun_*) or task group identifier (tgrp_*)"
          },
          {
            "name": "basis",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(all|index:[0-9]+|field:[a-zA-Z_][a-zA-Z0-9_]*)$"
            },
            "description": "Optional: Include basis information for task groups - 'all' for all results, 'index:{number}' for specific index, or 'field:{fieldname}' for specific field\n\nNB: Only use this when needed as it consumes a lot of tokens. Only applicable for task groups (tgrp_*).",
            "examples": {
              "all": {
                "value": "all",
                "summary": "Show basis for all results"
              },
              "index": {
                "value": "index:5",
                "summary": "Show basis for result at index 5"
              },
              "field": {
                "value": "field:company_name",
                "summary": "Show basis for company_name field across all results"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task run or task group results in Markdown format",
            "content": {
              "text/markdown": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Task run or task group not found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key",
        "description": "Parallel.ai API key"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Bearer token authentication"
      }
    },
    "schemas": {
      "TaskGroupResults": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Task group identifier"
          },
          "metadata": {
            "type": "object",
            "description": "Task group metadata"
          },
          "status": {
            "type": "object",
            "properties": {
              "num_task_runs": {
                "type": "integer",
                "description": "Total number of task runs"
              },
              "task_run_status_counts": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                },
                "description": "Count of runs by status"
              },
              "is_active": {
                "type": "boolean",
                "description": "Whether the task group is still processing"
              },
              "status_message": {
                "type": "string"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "output_schema": {
            "type": "object",
            "nullable": true,
            "description": "Output schema used for the tasks"
          },
          "results": {
            "type": "array",
            "description": "Flat array of results with merged input and output data",
            "items": {
              "$ref": "#/components/schemas/TaskResult"
            }
          },
          "runs": {
            "type": "array",
            "description": "Detailed run information",
            "items": {
              "$ref": "#/components/schemas/TaskRun"
            }
          }
        }
      },
      "TaskRunResults": {
        "type": "object",
        "properties": {
          "run_id": {
            "type": "string",
            "description": "Task run identifier"
          },
          "task_run": {
            "type": "object",
            "description": "Task run details"
          },
          "events": {
            "type": "array",
            "description": "Event stream from the task run",
            "items": {
              "type": "object"
            }
          },
          "progress_stats": {
            "type": "object",
            "description": "Progress statistics"
          },
          "output": {
            "type": "object",
            "description": "Task run output"
          }
        }
      },
      "TaskResult": {
        "type": "object",
        "description": "Flattened result combining input data and output content",
        "properties": {
          "$id": {
            "type": "string",
            "description": "Task run identifier"
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "action_required",
              "running",
              "completed",
              "failed",
              "cancelling",
              "cancelled"
            ]
          }
        },
        "additionalProperties": true,
        "example": {
          "$id": "trun_abc123",
          "status": "completed",
          "company_name": "Apple",
          "website": "https://apple.com",
          "ceo": "Tim Cook",
          "industry": "Technology"
        }
      },
      "TaskRun": {
        "type": "object",
        "properties": {
          "run_id": {
            "type": "string",
            "description": "Task run identifier"
          },
          "input_index": {
            "type": "integer",
            "description": "Index of the input in the original inputs array"
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "action_required",
              "running",
              "completed",
              "failed",
              "cancelling",
              "cancelled"
            ]
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the run is currently active"
          },
          "processor": {
            "type": "string",
            "description": "Processor used for this run"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "input": {
            "type": "object",
            "description": "Input data for this run"
          },
          "output": {
            "type": "object",
            "description": "Output from the task run",
            "properties": {
              "content": {
                "oneOf": [{ "type": "string" }, { "type": "object" }],
                "description": "The actual output content"
              }
            }
          },
          "output_basis": {
            "type": "object",
            "description": "Basis information for the output"
          },
          "error": {
            "type": "object",
            "nullable": true,
            "description": "Error information if the run failed"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the run"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "DeepResearchResponse": {
        "type": "object",
        "properties": {
          "run_id": {
            "type": "string",
            "description": "Task run identifier",
            "example": "trun_abc123def456"
          },
          "status": {
            "type": "string",
            "enum": ["queued", "running"],
            "description": "Current status of the task run",
            "example": "queued"
          },
          "processor": {
            "type": "string",
            "enum": ["pro", "ultra", "ultra2x", "ultra4x", "ultra8x"],
            "description": "Processor being used for the research",
            "example": "pro"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp when the task was created",
            "example": "2025-01-30T20:12:18.123456Z"
          },
          "platform_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to view task progress in Parallel's web interface"
          },
          "estimated_duration": {
            "type": "string",
            "description": "Estimated completion time range",
            "example": "5-25 minutes (Deep Research can take up to 45 minutes)"
          },
          "message": {
            "type": "string",
            "description": "Additional notes about the research configuration"
          }
        },
        "required": [
          "run_id",
          "status",
          "processor",
          "created_at",
          "events_stream_url",
          "platform_url",
          "estimated_duration",
          "notes"
        ]
      }
    }
  }
}
