{
  "openapi": "3.0.3",
  "info": {
    "x-mcp": {
      "protocolVersion": "2025-03-26",
      "toolOperationIds": ["createMultitask", "getTaskGroupResultsMarkdown"],
      "authEndpoint": "/me"
    },
    "title": "Parallel.ai Multitask API",
    "description": "Batch process tasks at scale using Parallel.ai",
    "version": "1.0.0",
    "contact": {
      "name": "Parallel.ai",
      "url": "https://parallel.ai"
    }
  },
  "servers": [
    {
      "url": "https://multitask-demo.parallel.ai",
      "description": "Multitask Demo Server"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Get HTML Interface",
        "description": "Serves the HTML interface for creating task groups",
        "operationId": "getIndexHTML",
        "responses": {
          "200": {
            "description": "HTML interface",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },

    "/v1beta/tasks/multitask": {
      "post": {
        "summary": "Create Multitask Group",
        "description": "Creates a new task group for batch processing. Responds with a URL in format https://multitask-demo.parallel.ai/{taskGroupId} that can immediately be shared with the user for viewing, results will be streamed in here.",
        "operationId": "createMultitask",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["inputs", "output_type"],
                "properties": {
                  "inputs": {
                    "description": "Either a JSON array of input objects, or a URL that returns a JSON array of input objects",
                    "oneOf": [
                      {
                        "type": "string",
                        "format": "uri",
                        "description": "URL that returns a JSON array of input objects"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "description": "Array of input objects"
                      }
                    ],
                    "example": [
                      {
                        "company_name": "Apple",
                        "website": "https://apple.com"
                      },
                      {
                        "company_name": "Microsoft",
                        "website": "https://microsoft.com"
                      }
                    ]
                  },
                  "output_type": {
                    "type": "string",
                    "enum": ["text", "json"],
                    "description": "Type of output expected from tasks"
                  },
                  "output_description": {
                    "type": "string",
                    "description": "Description of the desired output format or content",
                    "example": "Extract company information including CEO, industry, and revenue"
                  },
                  "output_schema": {
                    "type": "object",
                    "description": "JSON schema for structured output (only used when output_type is 'json'). Please note that things like minimumItems or format aren't supported",
                    "example": {
                      "type": "object",
                      "properties": {
                        "company_name": { "type": "string" },
                        "ceo": { "type": "string" },
                        "industry": { "type": "string" }
                      }
                    }
                  },
                  "processor": {
                    "type": "string",
                    "enum": ["lite", "base", "core", "pro", "ultra"],
                    "description": "Parallel.ai processor to use. If not specified, will be auto-suggested based on task requirements"
                  },
                  "webhook_url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to POST to when all tasks are completed",
                    "example": "https://example.com/webhook"
                  }
                }
              },
              "examples": {
                "json_with_schema": {
                  "summary": "JSON output with custom schema",
                  "value": {
                    "inputs": [
                      {
                        "company_name": "Apple",
                        "company_website": "https://apple.com"
                      },
                      {
                        "company_name": "Microsoft",
                        "company_website": "https://microsoft.com"
                      }
                    ],
                    "output_type": "json",
                    "output_schema": {
                      "type": "object",
                      "properties": {
                        "company_name": { "type": "string" },
                        "ceo": { "type": "string" },
                        "industry": { "type": "string" }
                      }
                    },
                    "processor": "core",
                    "webhook_url": "https://example.com/webhook"
                  }
                },
                "text_output": {
                  "summary": "Text output with description",
                  "value": {
                    "inputs": [
                      { "text": "Analyze this customer feedback" },
                      { "text": "Review this product description" }
                    ],
                    "output_type": "text",
                    "output_description": "Provide a sentiment analysis summary"
                  }
                },
                "url_inputs": {
                  "summary": "Inputs from URL",
                  "value": {
                    "inputs": "https://example.com/data.json",
                    "output_type": "json",
                    "output_description": "Extract key information from each item"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task group created successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "URL at which the task group can be viewed",
                  "example": "https://multitask-demo.parallel.ai/tgrp_abc123"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "Missing required fields: inputs, output_type"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "Missing x-api-key header"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "callbacks": {
          "taskGroupComplete": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Task Group Completion Webhook",
                "description": "Called when all tasks in the group are completed",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Webhook received successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{taskGroupId}": {
      "get": {
        "summary": "Get Task Group Results",
        "description": "Retrieves task group results in various formats",
        "operationId": "getTaskGroupResults",
        "parameters": [
          {
            "name": "taskGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task group identifier"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["application/json", "text/html", "text/markdown"]
            },
            "description": "Response format preference"
          }
        ],
        "responses": {
          "200": {
            "description": "Task group results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskGroupResults"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              },
              "text/markdown": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Task group not found"
          }
        }
      }
    },
    "/{taskGroupId}.md": {
      "get": {
        "summary": "Get Task Group Results as Markdown",
        "operationId": "getTaskGroupResultsMarkdown",
        "description": "Get Task Group Results as Markdown",
        "parameters": [
          {
            "name": "taskGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task group results in Markdown format",
            "content": {
              "text/markdown": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": ["Results"]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key",
        "description": "Parallel.ai API key"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Bearer token authentication"
      }
    },
    "schemas": {
      "TaskGroupResults": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Task group identifier"
          },
          "metadata": {
            "type": "object",
            "description": "Task group metadata"
          },
          "status": {
            "type": "object",
            "properties": {
              "num_task_runs": {
                "type": "integer",
                "description": "Total number of task runs"
              },
              "task_run_status_counts": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                },
                "description": "Count of runs by status"
              },
              "is_active": {
                "type": "boolean",
                "description": "Whether the task group is still processing"
              },
              "status_message": {
                "type": "string"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "output_schema": {
            "type": "object",
            "nullable": true,
            "description": "Output schema used for the tasks"
          },
          "results": {
            "type": "array",
            "description": "Flat array of results with merged input and output data",
            "items": {
              "$ref": "#/components/schemas/TaskResult"
            }
          },
          "runs": {
            "type": "array",
            "description": "Detailed run information",
            "items": {
              "$ref": "#/components/schemas/TaskRun"
            }
          }
        }
      },
      "TaskResult": {
        "type": "object",
        "description": "Flattened result combining input data and output content",
        "properties": {
          "$id": {
            "type": "string",
            "description": "Task run identifier"
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "action_required",
              "running",
              "completed",
              "failed",
              "cancelling",
              "cancelled"
            ]
          }
        },
        "additionalProperties": true,
        "example": {
          "$id": "trun_abc123",
          "status": "completed",
          "company_name": "Apple",
          "website": "https://apple.com",
          "ceo": "Tim Cook",
          "industry": "Technology"
        }
      },
      "TaskRun": {
        "type": "object",
        "properties": {
          "run_id": {
            "type": "string",
            "description": "Task run identifier"
          },
          "input_index": {
            "type": "integer",
            "description": "Index of the input in the original inputs array"
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "action_required",
              "running",
              "completed",
              "failed",
              "cancelling",
              "cancelled"
            ]
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the run is currently active"
          },
          "processor": {
            "type": "string",
            "description": "Processor used for this run"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "input": {
            "type": "object",
            "description": "Input data for this run"
          },
          "output": {
            "type": "object",
            "description": "Output from the task run",
            "properties": {
              "content": {
                "oneOf": [{ "type": "string" }, { "type": "object" }],
                "description": "The actual output content"
              }
            }
          },
          "output_basis": {
            "type": "object",
            "description": "Basis information for the output"
          },
          "error": {
            "type": "object",
            "nullable": true,
            "description": "Error information if the run failed"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the run"
          }
        }
      },
      "WebhookPayload": {
        "type": "object",
        "required": ["url"],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the completed task group results",
            "example": "https://multitask-demo.parallel.ai/tgrp_abc123"
          }
        }
      },

      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        }
      }
    }
  }
}
